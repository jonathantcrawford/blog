name: üöÄ Deploy
on:
  push:
    branches:
      - main
      - dev
  pull_request: {}

defaults:
  run:
    shell: bash

jobs:
  #  lint:
  #    name: ‚¨£ ESLint
  #    runs-on: ubuntu-latest
  #    steps:
  #      - name: üõë Cancel Previous Runs
  #        uses: styfle/cancel-workflow-action@0.9.1
  #
  #      - name: ‚¨áÔ∏è Checkout repo
  #        uses: actions/checkout@v3
  #
  #      - name: ‚éî Setup node
  #        uses: actions/setup-node@v3
  #        with:
  #          node-version: 14
  #
  #      - name: üì• Download deps
  #        uses: bahmutov/npm-install@v1
  #
  #      - name: üî¨ Lint
  #        run: npm run lint
  #
  #  typecheck:
  #    name:  ¶ TypeScript
  #    runs-on: ubuntu-latest
  #    steps:
  #      - name: üõë Cancel Previous Runs
  #        uses: styfle/cancel-workflow-action@0.9.1
  #
  #      - name: ‚¨áÔ∏è Checkout repo
  #        uses: actions/checkout@v3
  #
  #      - name: ‚éî Setup node
  #        uses: actions/setup-node@v3
  #        with:
  #          node-version: 14
  #
  #      - name: üì• Download deps
  #        uses: bahmutov/npm-install@v1
  #
  #      - name: üîé Type check
  #        run: npm run typecheck --if-present
  #
  #  vitest:
  #    name: ‚ö° Vitest
  #    runs-on: ubuntu-latest
  #    steps:
  #      - name: üõë Cancel Previous Runs
  #        uses: styfle/cancel-workflow-action@0.9.1
  #
  #      - name: ‚¨áÔ∏è Checkout repo
  #        uses: actions/checkout@v3
  #
  #      - name: ‚éî Setup node
  #        uses: actions/setup-node@v3
  #        with:
  #          node-version: 14
  #
  #      - name: üì• Download deps
  #        uses: bahmutov/npm-install@v1
  #
  #      - name: ‚ö° Run vitest
  #        run: npm run test -- --coverage
  #
  #  cypress:
  #    name: ‚ö´Ô∏è Cypress
  #    runs-on: ubuntu-latest
  #    steps:
  #      - name: üõë Cancel Previous Runs
  #        uses: styfle/cancel-workflow-action@0.9.1
  #
  #      - name: ‚¨áÔ∏è Checkout repo
  #        uses: actions/checkout@v3
  #
  #      - name: üèÑ Copy test env vars
  #        run: cp .env.example .env
  #
  #      - name: ‚éî Setup node
  #        uses: actions/setup-node@v3
  #        with:
  #          node-version: 14
  #
  #      - name: üì• Download deps
  #        uses: bahmutov/npm-install@v1
  #
  #      - name: üèó Build
  #        run: npm run build
  #
  #      - name: üå≥ Cypress run
  #        uses: cypress-io/github-action@v2
  #        with:
  #          start: npm run dev
  #          wait-on: "http://localhost:8811"
  #        env:
  #          PORT: "8811"

  deploy:
    concurrency:
      group: ${{ github.ref }}
      cancel-in-progress: true
    #needs: [lint, typecheck, vitest, cypress]
    runs-on: ubuntu-latest

    steps:
      - name: ‚¨áÔ∏è Checkout repo
        uses: actions/checkout@v3

      - name: ‚éî Setup node
        uses: actions/setup-node@v3
        with:
          node-version: 14.19.1

      - name: üëÄ Env
        run: |
          echo "Event name: ${{ github.event_name }}"
          echo "Git ref:    ${{ github.ref }}"
          echo "GH actor:   ${{ github.actor }}"
          echo "SHA:        ${{ github.sha }}"
          VER=`node --version`; echo "Node ver:   $VER"
          VER=`npm --version`; echo "npm ver:    $VER"

      # - name: üì• Download deps
      #   uses: bahmutov/npm-install@v1
      #   with:
      #     install-command: yarn

      - name: üèó Build Packages
        run:  yarn && yarn build 

      - name: üõ† Install Arc
        run: yarn global add @architect/architect @aws-sdk

      - name: üöÄ Staging Deploy
        if: github.ref == 'refs/heads/dev'
        run: |
          arc env --add --env staging ARC_APP_SECRET ${{ secrets.STAGING_ARC_APP_SECRET }}
          arc env --add --env staging AWS_BLOG_RUNTIME_ACCESS_KEY_ID ${{ secrets.STAGING_AWS_BLOG_RUNTIME_ACCESS_KEY_ID }}
          arc env --add --env staging AWS_BLOG_RUNTIME_SECRET_ACCESS_KEY ${{ secrets.STAGING_AWS_BLOG_RUNTIME_SECRET_ACCESS_KEY }}
          arc env --add --env staging NFT_PORT_TOKEN ${{ secrets.STAGING_NFT_PORT_TOKEN }}
          arc env --add --env staging S3_BUCKET ${{ secrets.STAGING_S3_BUCKET }}
          arc env --add --env staging S3_ENDPOINT ${{ secrets.STAGING_S3_ENDPOINT }}
          arc env --add --env staging S3_ENV_PREFIX ${{ secrets.STAGING_S3_ENV_PREFIX }}
          arc env --add --env staging S3_REGION ${{ secrets.STAGING_S3_REGION }}
          arc env --add --env staging SESSION_SECRET ${{ secrets.STAGING_SESSION_SECRET }}
          arc deploy --staging --prune
        env:
          CI: true
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}


      - name: üöÄ Production Deploy
        if: github.ref == 'refs/heads/main'
        run: |
          arc env --add --env production ARC_APP_SECRET ${{ secrets.PRODUCTION_ARC_APP_SECRET }}
          arc env --add --env production AWS_BLOG_RUNTIME_ACCESS_KEY_ID ${{ secrets.PRODUCTION_AWS_BLOG_RUNTIME_ACCESS_KEY_ID }}
          arc env --add --env production AWS_BLOG_RUNTIME_SECRET_ACCESS_KEY ${{ secrets.PRODUCTION_AWS_BLOG_RUNTIME_SECRET_ACCESS_KEY }}
          arc env --add --env production NFT_PORT_TOKEN ${{ secrets.PRODUCTION_NFT_PORT_TOKEN }}
          arc env --add --env production S3_BUCKET ${{ secrets.PRODUCTION_S3_BUCKET }}
          arc env --add --env production S3_ENDPOINT ${{ secrets.PRODUCTION_S3_ENDPOINT }}
          arc env --add --env production S3_ENV_PREFIX ${{ secrets.PRODUCTION_S3_ENV_PREFIX }}
          arc env --add --env production S3_REGION ${{ secrets.PRODUCTION_S3_REGION }}
          arc env --add --env production SESSION_SECRET ${{ secrets.PRODUCTION_SESSION_SECRET }}
          arc deploy --production --prune
        env:
          CI: true
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
