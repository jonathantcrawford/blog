import { AbortController, Headers as NodeHeaders, Request as NodeRequest } from "@remix-run/node";
import type { APIGatewayProxyEventHeaders, APIGatewayProxyEventV2, APIGatewayProxyHandlerV2, APIGatewayProxyStructuredResultV2 } from "aws-lambda";
import type { AppLoadContext, ServerBuild, Response as NodeResponse } from "@remix-run/node";
/**
 * A function that returns the value to use as `context` in route `loader` and
 * `action` functions.
 *
 * You can think of this as an escape hatch that allows you to pass
 * environment/platform-specific values through to your loader/action.
 */
export declare type GetLoadContextFunction = (event: APIGatewayProxyEventV2) => AppLoadContext;
export declare type RequestHandler = APIGatewayProxyHandlerV2;
/**
 * Returns a request handler for Architect that serves the response using
 * Remix.
 */
export declare function createRequestHandler({ build, getLoadContext, mode, }: {
    build: ServerBuild;
    getLoadContext?: GetLoadContextFunction;
    mode?: string;
}): RequestHandler;
export declare function createRemixRequest(event: APIGatewayProxyEventV2, abortController?: AbortController): NodeRequest;
export declare function createRemixHeaders(requestHeaders: APIGatewayProxyEventHeaders, requestCookies?: string[]): NodeHeaders;
export declare function sendRemixResponse(nodeResponse: NodeResponse, abortController: AbortController): Promise<APIGatewayProxyStructuredResultV2>;
