/**
 * @remix-run/architect v1.3.4
 *
 * Copyright (c) Remix Software Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE.md file in the root directory of this source tree.
 *
 * @license MIT
 */
'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var node = require('@remix-run/node');
var binaryTypes = require('./binaryTypes.js');

/**
 * A function that returns the value to use as `context` in route `loader` and
 * `action` functions.
 *
 * You can think of this as an escape hatch that allows you to pass
 * environment/platform-specific values through to your loader/action.
 */

/**
 * Returns a request handler for Architect that serves the response using
 * Remix.
 */
function createRequestHandler({
  build,
  getLoadContext,
  mode = process.env.NODE_ENV
}) {
  let handleRequest = node.createRequestHandler(build, mode);
  return async (event
  /*, context*/
  ) => {
    let abortController = new node.AbortController();
    let request = await createRemixRequest(event, abortController);
    let loadContext = typeof getLoadContext === "function" ? getLoadContext(event) : undefined;
    let response = await handleRequest(request, loadContext);
    return sendRemixResponse(response, abortController);
  };
}
function createRemixRequest(event, abortController) {
  let host = event.headers["x-forwarded-host"] || event.headers.host;
  let search = event.rawQueryString.length ? `?${event.rawQueryString}` : "";
  let url = new URL(event.rawPath + search, `https://${host}`);
  let isFormData = false;
  if (event.headers["content-type"] && event.headers["content-type"].includes("multipart/form-data")) {
    isFormData = true;
  }
  return new node.Request(url.href, {
    method: event.requestContext.http.method,
    headers: createRemixHeaders(event.headers, event.cookies),
    body: event.body && event.isBase64Encoded ? !isFormData ? Buffer.from(event.body, "base64").toString() : Buffer.from(event.body, "base64") : event.body,
    abortController,
    signal: abortController === null || abortController === void 0 ? void 0 : abortController.signal
  });
}
function createRemixHeaders(requestHeaders, requestCookies) {
  let headers = new node.Headers();

  for (let [header, value] of Object.entries(requestHeaders)) {
    if (value) {
      headers.append(header, value);
    }
  }

  if (requestCookies) {
    headers.append("Cookie", requestCookies.join("; "));
  }

  return headers;
}
async function sendRemixResponse(nodeResponse, abortController) {
  let cookies = []; // Arc/AWS API Gateway will send back set-cookies outside of response headers.

  for (let [key, values] of Object.entries(nodeResponse.headers.raw())) {
    if (key.toLowerCase() === "set-cookie") {
      for (let value of values) {
        cookies.push(value);
      }
    }
  }

  if (cookies.length) {
    nodeResponse.headers.delete("Set-Cookie");
  }

  if (abortController.signal.aborted) {
    nodeResponse.headers.set("Connection", "close");
  }

  let contentType = nodeResponse.headers.get("Content-Type");
  let isBinary = binaryTypes.isBinaryType(contentType);
  let body;
  let isBase64Encoded = false;

  if (isBinary) {
    let blob = await nodeResponse.arrayBuffer();
    body = Buffer.from(blob).toString("base64");
    isBase64Encoded = true;
  } else {
    body = await nodeResponse.text();
  }

  return {
    statusCode: nodeResponse.status,
    headers: Object.fromEntries(nodeResponse.headers),
    cookies,
    body,
    isBase64Encoded
  };
}

exports.createRemixHeaders = createRemixHeaders;
exports.createRemixRequest = createRemixRequest;
exports.createRequestHandler = createRequestHandler;
exports.sendRemixResponse = sendRemixResponse;
