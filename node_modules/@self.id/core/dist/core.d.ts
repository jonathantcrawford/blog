import { CeramicClient } from '@ceramicnetwork/http-client';
import { DataModel } from '@glazed/datamodel';
import { DIDDataStore } from '@glazed/did-datastore';
import type { DefinitionContentType } from '@glazed/did-datastore';
import { TileLoader } from '@glazed/tile-loader';
import type { TileCache } from '@glazed/tile-loader';
import type { ModelTypeAliases, ModelTypesToAliases } from '@glazed/types';
import { Resolver } from 'did-resolver';
import type { CeramicNetwork, CoreModelTypes } from './types';
/** @internal */
export declare const CERAMIC_URLS: Record<CeramicNetwork, string>;
export declare type CoreParams<ModelTypes extends ModelTypeAliases = CoreModelTypes> = {
    cache?: TileCache | boolean;
    ceramic: CeramicNetwork | string;
    loader?: TileLoader;
    model?: ModelTypesToAliases<ModelTypes>;
};
/**
 * ```sh
 * import { Core } from '@self.id/core'
 * ```
 */
export declare class Core<ModelTypes extends ModelTypeAliases = CoreModelTypes, Alias extends keyof ModelTypes['definitions'] = keyof ModelTypes['definitions']> {
    #private;
    constructor(params: CoreParams<ModelTypes>);
    get ceramic(): CeramicClient;
    get dataModel(): DataModel<ModelTypes>;
    get dataStore(): DIDDataStore<ModelTypes>;
    get resolver(): Resolver;
    get tileLoader(): TileLoader;
    getAccountDID(account: string): Promise<string>;
    toDID(accountOrDID: string): Promise<string>;
    get<Key extends Alias, ContentType = DefinitionContentType<ModelTypes, Key>>(key: Key, id: string): Promise<ContentType | null>;
}
