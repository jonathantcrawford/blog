import { ThreeIdConnect } from '@3id/connect';
import type { EthereumAuthProvider } from '@3id/connect';
import type { ModelTypeAliases } from '@glazed/types';
import { Core } from '@self.id/core';
import type { CoreModelTypes, CoreParams } from '@self.id/core';
import { DID } from 'dids';
export declare type ConnectNetwork = 'dev-unstable' | 'mainnet' | 'testnet-clay';
export declare type WebClientParams<ModelTypes extends ModelTypeAliases = CoreModelTypes> = CoreParams<ModelTypes> & {
    connectNetwork?: ConnectNetwork;
};
/**
 * Extends {@linkcode core.Core}
 *
 * ```sh
 * import { WebClient } from '@self.id/web'
 * ```
 */
export declare class WebClient<ModelTypes extends ModelTypeAliases = CoreModelTypes> extends Core<ModelTypes> {
    #private;
    constructor(params: WebClientParams<ModelTypes>);
    get threeId(): ThreeIdConnect;
    authenticate(authProvider: EthereumAuthProvider, attachToCeramic?: boolean): Promise<DID>;
    connect(authProvider: EthereumAuthProvider): Promise<DID>;
}
