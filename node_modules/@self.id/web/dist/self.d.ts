import type { EthereumAuthProvider } from '@3id/connect';
import type { StreamID } from '@ceramicnetwork/streamid';
import type { DefinitionContentType } from '@glazed/did-datastore';
import type { ModelTypeAliases } from '@glazed/types';
import type { CoreModelTypes } from '@self.id/core';
import type { DID } from 'dids';
import { WebClient } from './client';
import type { WebClientParams } from './client';
export declare type AuthenticateParams<ModelTypes extends ModelTypeAliases = CoreModelTypes> = WebClientParams<ModelTypes> & {
    authProvider: EthereumAuthProvider;
};
export declare type SelfIDParams<ModelTypes extends ModelTypeAliases = CoreModelTypes> = {
    client: WebClient<ModelTypes>;
};
/**
 * ```sh
 * import { SelfID } from '@self.id/web'
 * ```
 */
export declare class SelfID<ModelTypes extends ModelTypeAliases = CoreModelTypes, Alias extends keyof ModelTypes['definitions'] = keyof ModelTypes['definitions']> {
    #private;
    static authenticate<ModelTypes extends ModelTypeAliases = CoreModelTypes>(params: AuthenticateParams<ModelTypes>): Promise<SelfID<ModelTypes>>;
    constructor(params: SelfIDParams<ModelTypes>);
    get client(): WebClient<ModelTypes>;
    get did(): DID;
    get id(): string;
    get<Key extends Alias, ContentType = DefinitionContentType<ModelTypes, Key>>(key: Key): Promise<ContentType | null>;
    set<Key extends Alias, ContentType = DefinitionContentType<ModelTypes, Key>>(key: Key, content: ContentType): Promise<StreamID>;
    merge<Key extends Alias, ContentType = DefinitionContentType<ModelTypes, Key>>(key: Key, content: ContentType): Promise<StreamID>;
}
