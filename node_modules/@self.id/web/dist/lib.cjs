"use strict";Object.defineProperty(exports,"__esModule",{value:!0});var s=require("@3id/connect"),v=require("@self.id/core"),f=require("dids"),o=(t,e,r)=>{if(!e.has(t))throw TypeError("Cannot "+r)},d=(t,e,r)=>(o(t,e,"read from private field"),r?r.call(t):e.get(t)),w=(t,e,r)=>{if(e.has(t))throw TypeError("Cannot add the same private member more than once");e instanceof WeakSet?e.add(t):e.set(t,r)},p=(t,e,r,a)=>(o(t,e,"write to private field"),a?a.call(t,r):e.set(t,r),r),n;class h extends v.Core{constructor(e){super(e);w(this,n,void 0),p(this,n,new s.ThreeIdConnect(e.connectNetwork??e.ceramic))}get threeId(){return d(this,n)}async authenticate(e,r=!0){const a=await this.connect(e);return await a.authenticate(),r&&(this.ceramic.did=a),a}async connect(e){return await d(this,n).connect(e),new f.DID({provider:d(this,n).getDidProvider(),resolver:this.resolver})}}n=new WeakMap;var u=(t,e,r)=>{if(!e.has(t))throw TypeError("Cannot "+r)},c=(t,e,r)=>(u(t,e,"read from private field"),r?r.call(t):e.get(t)),_=(t,e,r)=>{if(e.has(t))throw TypeError("Cannot add the same private member more than once");e instanceof WeakSet?e.add(t):e.set(t,r)},y=(t,e,r,a)=>(u(t,e,"write to private field"),a?a.call(t,r):e.set(t,r),r),i;const l=class{constructor(t){if(_(this,i,void 0),!t.client.ceramic.did?.authenticated)throw new Error("Input DID must be authenticated, use SelfID.authenticate() instead of new SelfID()");y(this,i,t.client)}static async authenticate(t){const{authProvider:e,...r}=t,a=new h(r);return await a.authenticate(e,!0),new l({client:a})}get client(){return c(this,i)}get did(){const t=c(this,i).ceramic.did;if(t==null||!t.authenticated)throw new Error("Expected authenticated DID instance to be attached to Ceramic");return t}get id(){return this.did.id}async get(t){return await c(this,i).dataStore.get(t,this.did.id)}async set(t,e){return await c(this,i).dataStore.set(t,e)}async merge(t,e){return await c(this,i).dataStore.merge(t,e)}};let D=l;i=new WeakMap,Object.defineProperty(exports,"EthereumAuthProvider",{enumerable:!0,get:function(){return s.EthereumAuthProvider}}),exports.SelfID=D,exports.WebClient=h;
//# sourceMappingURL=lib.cjs.map
